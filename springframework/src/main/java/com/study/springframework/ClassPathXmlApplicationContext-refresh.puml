@startuml
== refresh ==
ClassPathXmlApplicationContext->AbstractApplicationContext:refresh()

== 准备刷新的上下文环境(prepareRefresh) ==
AbstractApplicationContext->AbstractApplicationContext:initPropertySources()
AbstractApplicationContext->AbstractEnvironment:validateRequiredProperties()
AbstractEnvironment -->AbstractApplicationContext

== 初始化BeanFactory,进行xml解析(obtainFreshBeanFactory) ==
AbstractApplicationContext -> AbstractRefreshableApplicationContext:refreshBeanFactory()
note left:BeanFactory存在进行销毁\n创建DefaultListableBeanFactory\n定义BeanFactory\n对xml进行解析
AbstractRefreshableApplicationContext->AbstractXmlApplicationContext:loadBeanDefinitions(beanFactory)
note left:new XmlBeanDefinitionReader(beanFactory)\n配置BeanDefinitionReader\n设定xml检查模式为自动检测
AbstractXmlApplicationContext -> AbstractRefreshableConfigApplicationContext:getConfigLocations()获取配置文件路径
AbstractRefreshableConfigApplicationContext -->AbstractXmlApplicationContext
AbstractXmlApplicationContext ->AbstractBeanDefinitionReader:loadBeanDefinitions(configLocations)
AbstractBeanDefinitionReader -> AbstractBeanDefinitionReader:loadBeanDefinitions(String location)
AbstractBeanDefinitionReader -> AbstractBeanDefinitionReader:loadBeanDefinitions(String location,\n Set<Resource> actualResources)
AbstractBeanDefinitionReader -> AbstractBeanDefinitionReader:loadBeanDefinitions(Resource... resources)
AbstractBeanDefinitionReader -> XmlBeanDefinitionReader:loadBeanDefinitions(Resource resource)
XmlBeanDefinitionReader -> XmlBeanDefinitionReader:loadBeanDefinitions(EncodedResource encodedResource)
XmlBeanDefinitionReader -> XmlBeanDefinitionReader:doLoadBeanDefinitions(InputSource inputSource,\n Resource resource)
note right:加载xml文件\n解析xml文件并注册
XmlBeanDefinitionReader -->AbstractBeanDefinitionReader
AbstractBeanDefinitionReader -->AbstractXmlApplicationContext
AbstractXmlApplicationContext -->AbstractRefreshableApplicationContext
AbstractRefreshableApplicationContext -->AbstractApplicationContext
AbstractApplicationContext -> AbstractRefreshableApplicationContext:getBeanFactory()
AbstractRefreshableApplicationContext -->AbstractApplicationContext

== 对BeanFactory进行功能填充(prepareBeanFactory) ==
AbstractApplicationContext -> AbstractApplicationContext:prepareBeanFactory(beanFactory)

== 子类方法进行覆盖处理(postProcessBeanFactory) ==
AbstractApplicationContext -> AbstractApplicationContext:postProcessBeanFactory(beanFactory)，\n子类特殊处理可覆盖该方法

== 激活各种BeanFactory处理器(invokeBeanFactoryPostProcessors) ==
AbstractApplicationContext -> PostProcessorRegistrationDelegate:invokeBeanFactoryPostProcessors
PostProcessorRegistrationDelegate --> AbstractApplicationContext

== 注册拦截Bean创建的处理器(registerBeanPostProcessors) ==
AbstractApplicationContext -> PostProcessorRegistrationDelegate:registerBeanPostProcessors
PostProcessorRegistrationDelegate --> AbstractApplicationContext

== 为上下文初始化message源(initMessageSource) ==
AbstractApplicationContext->AbstractApplicationContext:initMessageSource 国际化处理

== 初始化应用消息广播器(initApplicationEventMulticaster) ==

== 供子类来初始化其它Bean(onRefresh) ==




AbstractApplicationContext->ClassPathXmlApplicationContext:refresh()
@enduml